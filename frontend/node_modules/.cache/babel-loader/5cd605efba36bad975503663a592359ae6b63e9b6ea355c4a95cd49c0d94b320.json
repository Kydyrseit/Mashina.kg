{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kydyrseit\\\\PycharmProjects\\\\mashina.kg\\\\frontend\\\\src\\\\components\\\\CarList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Card, Col, Row, Container } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CarList = ({\n  filters\n}) => {\n  _s();\n  const [cars, setCars] = useState([]);\n  useEffect(() => {\n    // Пока используем фиктивные данные для демонстрации.\n    // При интеграции с API замените этот блок на fetch(\"...\").\n    const fakeCars = [{\n      id: 1,\n      brand: \"Toyota\",\n      model: \"Camry\",\n      year: 2018,\n      price: 15000,\n      image: \"https://via.placeholder.com/300\"\n    }, {\n      id: 2,\n      brand: \"Honda\",\n      model: \"Civic\",\n      year: 2017,\n      price: 13000,\n      image: \"https://via.placeholder.com/300\"\n    }, {\n      id: 3,\n      brand: \"BMW\",\n      model: \"X5\",\n      year: 2020,\n      price: 35000,\n      image: \"https://via.placeholder.com/300\"\n    }];\n\n    // Простейшая фильтрация по марке: если в фильтрах введено значение — фильтруем по нему.\n    const filteredCars = filters.brand ? fakeCars.filter(car => car.brand.toLowerCase().includes(filters.brand.toLowerCase())) : fakeCars;\n    setCars(filteredCars);\n  }, [filters]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"mt-4\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: cars.map(car => /*#__PURE__*/_jsxDEV(Col, {\n        md: 4,\n        className: \"mb-4\",\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n            variant: \"top\",\n            src: car.image,\n            alt: `${car.brand} ${car.model}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n              children: [car.brand, \" \", car.model, \" (\", car.year, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n              children: [\"\\u0426\\u0435\\u043D\\u0430: \", car.price]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this)\n      }, car.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(CarList, \"/EQt6wAxOgtQYDavlJ/SWb5B/tI=\");\n_c = CarList;\nexport default CarList;\nvar _c;\n$RefreshReg$(_c, \"CarList\");","map":{"version":3,"names":["React","useEffect","useState","Card","Col","Row","Container","jsxDEV","_jsxDEV","CarList","filters","_s","cars","setCars","fakeCars","id","brand","model","year","price","image","filteredCars","filter","car","toLowerCase","includes","className","children","map","md","Img","variant","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","Body","Title","Text","_c","$RefreshReg$"],"sources":["C:/Users/Kydyrseit/PycharmProjects/mashina.kg/frontend/src/components/CarList.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Card, Col, Row, Container } from \"react-bootstrap\";\r\n\r\nconst CarList = ({ filters }) => {\r\n  const [cars, setCars] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Пока используем фиктивные данные для демонстрации.\r\n    // При интеграции с API замените этот блок на fetch(\"...\").\r\n    const fakeCars = [\r\n      {\r\n        id: 1,\r\n        brand: \"Toyota\",\r\n        model: \"Camry\",\r\n        year: 2018,\r\n        price: 15000,\r\n        image: \"https://via.placeholder.com/300\",\r\n      },\r\n      {\r\n        id: 2,\r\n        brand: \"Honda\",\r\n        model: \"Civic\",\r\n        year: 2017,\r\n        price: 13000,\r\n        image: \"https://via.placeholder.com/300\",\r\n      },\r\n      {\r\n        id: 3,\r\n        brand: \"BMW\",\r\n        model: \"X5\",\r\n        year: 2020,\r\n        price: 35000,\r\n        image: \"https://via.placeholder.com/300\",\r\n      },\r\n    ];\r\n\r\n    // Простейшая фильтрация по марке: если в фильтрах введено значение — фильтруем по нему.\r\n    const filteredCars = filters.brand\r\n      ? fakeCars.filter((car) =>\r\n          car.brand.toLowerCase().includes(filters.brand.toLowerCase())\r\n        )\r\n      : fakeCars;\r\n\r\n    setCars(filteredCars);\r\n  }, [filters]);\r\n\r\n  return (\r\n    <Container className=\"mt-4\">\r\n      <Row>\r\n        {cars.map((car) => (\r\n          <Col md={4} key={car.id} className=\"mb-4\">\r\n            <Card>\r\n              <Card.Img\r\n                variant=\"top\"\r\n                src={car.image}\r\n                alt={`${car.brand} ${car.model}`}\r\n              />\r\n              <Card.Body>\r\n                <Card.Title>\r\n                  {car.brand} {car.model} ({car.year})\r\n                </Card.Title>\r\n                <Card.Text>Цена: {car.price}</Card.Text>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        ))}\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default CarList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}